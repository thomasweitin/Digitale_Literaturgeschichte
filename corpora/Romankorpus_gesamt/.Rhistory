train <- freq_without[sample, ]
test  <- freq_without[-sample, ]
test <- rbind(test, test_cases_df)
ctrl <- trainControl(method = "cv", number = 10,
savePred = TRUE, classProb = TRUE)
mod <- train(gender ~ ., data = train,
method = "svmLinear", trControl = ctrl)
predictions <- predict.train(object = mod, test, type="raw")
conf <- confusionMatrix(predictions, as.factor(test$gender))
accuracy <- conf$overall[[1]]
precision <- conf$byClass[[5]]
recall <- conf$byClass[[6]]
f1 <- 2*((precision*recall)/(precision + recall))
test$gender_predicted <- predictions
results_prediction <- test[,c("gender", "gender_predicted")]
j <- which(!(results_prediction$gender == results_prediction$gender_predicted))
df <- results_prediction[j, ]
texts <- rownames(df)
as_string <- c()
for (y in 1:length(texts)) {
comma <- as.name(paste0(as.name(texts[y]), ", "))
as_string <- paste0(as_string, comma)
}
results <- c(cut_off, accuracy, precision, recall, f1, as.factor(as_string))
all_predictions[i,] <- results
all_predictions[i,6] <- as_string
print(i)
}
all_predictions <- data.frame(MFW = numeric(),
accuracy = numeric(), precision = numeric(),
recall = numeric(), f1 = numeric(),
incorrect = factor())
for (i in 1:30) {
x <- (i-1)*100
cut_off <- 3000 - x
freq_df_3000 <- freq_df[,1:cut_off]
freq_df_3000$gender <- rownames(freq_df_3000)
freq_df_3000$gender <- gsub("(w|m)_.+", "\\1", freq_df_3000$gender)
test_cases <- c("w_La-Roche_Sternheim-Teil-1_1771",
"w_La-Roche_Sternheim-Teil-2_1771",
"w_Wobeser_Elisa_1795",
"w_Unger_Bekenntnisse_1806")
test_cases_df <- freq_df_3000[test_cases,]
freq_without <- freq_df_3000[!(row.names(freq_df_3000) %in% test_cases), ]
set.seed(seed)
sample <- sample.int(n = nrow(freq_without),
size = floor(.83*nrow(freq_without)), replace = FALSE)
train <- freq_without[sample, ]
test  <- freq_without[-sample, ]
test <- rbind(test, test_cases_df)
ctrl <- trainControl(method = "cv", number = 10,
savePred = TRUE, classProb = TRUE)
mod <- train(gender ~ ., data = train,
method = "svmLinear", trControl = ctrl)
predictions <- predict.train(object = mod, test, type="raw")
conf <- confusionMatrix(predictions, as.factor(test$gender))
accuracy <- conf$overall[[1]]
precision <- conf$byClass[[5]]
recall <- conf$byClass[[6]]
f1 <- 2*((precision*recall)/(precision + recall))
test$gender_predicted <- predictions
results_prediction <- test[,c("gender", "gender_predicted")]
j <- which(!(results_prediction$gender == results_prediction$gender_predicted))
df <- results_prediction[j, ]
texts <- rownames(df)
as_string <- c()
for (y in 1:length(texts)) {
comma <- as.name(paste0(as.name(texts[y]), ", "))
as_string <- paste0(as_string, comma)
}
results <- c(cut_off, accuracy, precision, recall, f1, as.factor(as_string))
all_predictions[i,] <- results
print(i)
}
all_predictions
texts <- rownames(df)
as_string <- c()
for (y in 1:length(texts)) {
comma <- as.name(paste0(as.name(texts[y]), "& "))
as_string <- paste0(as_string, comma)
}
results <- c(cut_off, accuracy, precision, recall, f1, as.factor(as_string))
all_predictions[i,] <- results
all_predictions
as_string
texts
class(texts)
texts_r <- paste(texts, sep="", collapse="")
texts_r
texts <- rownames(df)
texts_r <- paste(texts, sep=",", collapse="") }
texts_r <- paste(texts, sep=",", collapse="")
texts_r
texts <- rownames(df)
texts
texts_r <- paste(texts, sep=", ", collapse="")
texts_r
texts_r <- paste(texts, sep=", ", collapse=" ")
texts_r
texts_r <- paste(texts, sep=" ", collapse=" ")
texts_r
texts_r <- paste(texts, sep="", collapse=" ")
texts_r
texts_r <- paste(texts, sep=",", collapse=" ")
texts_r
results <- c(cut_off, accuracy, precision, recall, f1, as.factor(as_string))
all_predictions[i,] <- results
results <- c(cut_off, accuracy, precision, recall, f1, as_string)
all_predictions[i,] <- results
all_predictions <- data.frame(MFW = numeric(),
accuracy = numeric(), precision = numeric(),
recall = numeric(), f1 = numeric(),
incorrect = character())
j <- which(!(results_prediction$gender == results_prediction$gender_predicted))
df <- results_prediction[j, ]
texts <- rownames(df)
texts_r <- paste(texts, sep=",", collapse=" ")
results <- c(cut_off, accuracy, precision, recall, f1, as_string)
all_predictions[i,] <- results
all_predictions
texts_r
class(texts_r)
all_predictions <- data.frame(MFW = numeric(),
accuracy = numeric(), precision = numeric(),
recall = numeric(), f1 = numeric(),
incorrect = character(), stringsAsFactors = FALSE)
for (i in 1:30) {
x <- (i-1)*100
cut_off <- 3000 - x
freq_df_3000 <- freq_df[,1:cut_off]
freq_df_3000$gender <- rownames(freq_df_3000)
freq_df_3000$gender <- gsub("(w|m)_.+", "\\1", freq_df_3000$gender)
test_cases <- c("w_La-Roche_Sternheim-Teil-1_1771",
"w_La-Roche_Sternheim-Teil-2_1771",
"w_Wobeser_Elisa_1795",
"w_Unger_Bekenntnisse_1806")
test_cases_df <- freq_df_3000[test_cases,]
freq_without <- freq_df_3000[!(row.names(freq_df_3000) %in% test_cases), ]
set.seed(seed)
sample <- sample.int(n = nrow(freq_without),
size = floor(.83*nrow(freq_without)), replace = FALSE)
train <- freq_without[sample, ]
test  <- freq_without[-sample, ]
test <- rbind(test, test_cases_df)
ctrl <- trainControl(method = "cv", number = 10,
savePred = TRUE, classProb = TRUE)
mod <- train(gender ~ ., data = train,
method = "svmLinear", trControl = ctrl)
predictions <- predict.train(object = mod, test, type="raw")
conf <- confusionMatrix(predictions, as.factor(test$gender))
accuracy <- conf$overall[[1]]
precision <- conf$byClass[[5]]
recall <- conf$byClass[[6]]
f1 <- 2*((precision*recall)/(precision + recall))
test$gender_predicted <- predictions
results_prediction <- test[,c("gender", "gender_predicted")]
j <- which(!(results_prediction$gender == results_prediction$gender_predicted))
df <- results_prediction[j, ]
texts <- rownames(df)
texts_r <- paste(texts, sep=",", collapse=" ")
results <- c(cut_off, accuracy, precision, recall, f1, as_string)
all_predictions[i,] <- results
print(i)
}
all_predictions
library(caret)
library(stylo)
setwd("C:\\Users\\litlab-hiwi\\Documents\\12gegenGoethe\\corpora\\190724_Romankorpus_Classifier\\Romankorpus_gesamt")
corpus_dir <- "C:\\Users\\litlab-hiwi\\Documents\\12gegenGoethe\\corpora\\190724_Romankorpus_Classifier\\Romankorpus_gesamt\\all" # Pfad zum Korpus
MFW <- 3000
start_at <- 1
distance_measure <- "dist.delta"
ngram_size <- 1
culling <- 20
seed <- 101
#------------------------------------------------------------------------------#
## Stylo-Ausfuehrung  ---------------------------------------------------------#
#------------------------------------------------------------------------------#
# Die Analysen werden in ein Batch abgespeichert, um später zusätzliche
# Informationen extrahieren zu können.
batch <- stylo(gui = FALSE, corpus.dir = corpus_dir,
corpus.format = "plain",
corpus.lang = "German", encoding = "UTF-8",
mfw.min = MFW, mfw.max = MFW, mfw.incr = 0,
culling.min = culling, culling.max = culling, culling.incr = 0,
analyzed.features = "w",
delete.pronouns = FALSE,
start.at = start_at,
ngram.size = ngram_size, distance.measure = distance_measure)
freq_df <- as.data.frame(batch$table.with.all.freqs)
all_predictions <- data.frame(MFW = numeric(),
accuracy = numeric(), precision = numeric(),
recall = numeric(), f1 = numeric(),
incorrect = character(), stringsAsFactors = FALSE)
for (i in 1:30) {
x <- (i-1)*100
cut_off <- 3000 - x
freq_df_3000 <- freq_df[,1:cut_off]
freq_df_3000$gender <- rownames(freq_df_3000)
freq_df_3000$gender <- gsub("(w|m)_.+", "\\1", freq_df_3000$gender)
test_cases <- c("w_La-Roche_Sternheim-Teil-1_1771",
"w_La-Roche_Sternheim-Teil-2_1771",
"w_Wobeser_Elisa_1795",
"w_Unger_Bekenntnisse_1806")
test_cases_df <- freq_df_3000[test_cases,]
freq_without <- freq_df_3000[!(row.names(freq_df_3000) %in% test_cases), ]
set.seed(seed)
sample <- sample.int(n = nrow(freq_without),
size = floor(.83*nrow(freq_without)), replace = FALSE)
train <- freq_without[sample, ]
test  <- freq_without[-sample, ]
test <- rbind(test, test_cases_df)
ctrl <- trainControl(method = "cv", number = 10,
savePred = TRUE, classProb = TRUE)
mod <- train(gender ~ ., data = train,
method = "svmLinear", trControl = ctrl)
predictions <- predict.train(object = mod, test, type="raw")
conf <- confusionMatrix(predictions, as.factor(test$gender))
accuracy <- conf$overall[[1]]
precision <- conf$byClass[[5]]
recall <- conf$byClass[[6]]
f1 <- 2*((precision*recall)/(precision + recall))
test$gender_predicted <- predictions
results_prediction <- test[,c("gender", "gender_predicted")]
j <- which(!(results_prediction$gender == results_prediction$gender_predicted))
df <- results_prediction[j, ]
texts <- rownames(df)
texts_r <- paste(texts, sep=",", collapse=" ")
results <- c(cut_off, accuracy, precision, recall, f1, as_string)
all_predictions[i,] <- results
print(i)
}
write.table(all_predictions, paste0("all_predictions_all_values_seed", seed, ".csv"),
col.names = NA, sep = " ")
all_predictions
library(caret)
library(stylo)
setwd("C:\\Users\\litlab-hiwi\\Documents\\12gegenGoethe\\corpora\\190724_Romankorpus_Classifier\\Romankorpus_gesamt")
corpus_dir <- "C:\\Users\\litlab-hiwi\\Documents\\12gegenGoethe\\corpora\\190724_Romankorpus_Classifier\\Romankorpus_gesamt\\all" # Pfad zum Korpus
MFW <- 3000
start_at <- 1
distance_measure <- "dist.delta"
ngram_size <- 1
culling <- 20
seed <- 101
#------------------------------------------------------------------------------#
## Stylo-Ausfuehrung  ---------------------------------------------------------#
#------------------------------------------------------------------------------#
# Die Analysen werden in ein Batch abgespeichert, um später zusätzliche
# Informationen extrahieren zu können.
batch <- stylo(gui = FALSE, corpus.dir = corpus_dir,
corpus.format = "plain",
corpus.lang = "German", encoding = "UTF-8",
mfw.min = MFW, mfw.max = MFW, mfw.incr = 0,
culling.min = culling, culling.max = culling, culling.incr = 0,
analyzed.features = "w",
delete.pronouns = FALSE,
start.at = start_at,
ngram.size = ngram_size, distance.measure = distance_measure)
freq_df <- as.data.frame(batch$table.with.all.freqs)
all_predictions <- data.frame(MFW = numeric(),
accuracy = numeric(), precision = numeric(),
recall = numeric(), f1 = numeric(),
incorrect = character(), stringsAsFactors = FALSE)
for (i in 1:30) {
x <- (i-1)*100
cut_off <- 3000 - x
freq_df_3000 <- freq_df[,1:cut_off]
freq_df_3000$gender <- rownames(freq_df_3000)
freq_df_3000$gender <- gsub("(w|m)_.+", "\\1", freq_df_3000$gender)
test_cases <- c("w_La-Roche_Sternheim-Teil-1_1771",
"w_La-Roche_Sternheim-Teil-2_1771",
"w_Wobeser_Elisa_1795",
"w_Unger_Bekenntnisse_1806")
test_cases_df <- freq_df_3000[test_cases,]
freq_without <- freq_df_3000[!(row.names(freq_df_3000) %in% test_cases), ]
set.seed(seed)
sample <- sample.int(n = nrow(freq_without),
size = floor(.83*nrow(freq_without)), replace = FALSE)
train <- freq_without[sample, ]
test  <- freq_without[-sample, ]
test <- rbind(test, test_cases_df)
ctrl <- trainControl(method = "cv", number = 10,
savePred = TRUE, classProb = TRUE)
mod <- train(gender ~ ., data = train,
method = "svmLinear", trControl = ctrl)
predictions <- predict.train(object = mod, test, type="raw")
conf <- confusionMatrix(predictions, as.factor(test$gender))
accuracy <- conf$overall[[1]]
precision <- conf$byClass[[5]]
recall <- conf$byClass[[6]]
f1 <- 2*((precision*recall)/(precision + recall))
test$gender_predicted <- predictions
results_prediction <- test[,c("gender", "gender_predicted")]
j <- which(!(results_prediction$gender == results_prediction$gender_predicted))
df <- results_prediction[j, ]
texts <- rownames(df)
texts_r <- paste(texts, sep=",", collapse=" ")
results <- c(cut_off, accuracy, precision, recall, f1, texts_r)
all_predictions[i,] <- results
print(i)
}
write.table(all_predictions, paste0("all_predictions_all_values_seed", seed, ".csv"),
col.names = NA, sep = " ")
all_predictions
library(caret)
library(stylo)
setwd("C:\\Users\\litlab-hiwi\\Documents\\12gegenGoethe\\corpora\\190724_Romankorpus_Classifier\\Romankorpus_gesamt")
corpus_dir <- "C:\\Users\\litlab-hiwi\\Documents\\12gegenGoethe\\corpora\\190724_Romankorpus_Classifier\\Romankorpus_gesamt\\all" # Pfad zum Korpus
MFW <- 3000
start_at <- 1
distance_measure <- "dist.delta"
ngram_size <- 1
culling <- 20
seed <- 100
#------------------------------------------------------------------------------#
## Stylo-Ausfuehrung  ---------------------------------------------------------#
#------------------------------------------------------------------------------#
# Die Analysen werden in ein Batch abgespeichert, um später zusätzliche
# Informationen extrahieren zu können.
batch <- stylo(gui = FALSE, corpus.dir = corpus_dir,
corpus.format = "plain",
corpus.lang = "German", encoding = "UTF-8",
mfw.min = MFW, mfw.max = MFW, mfw.incr = 0,
culling.min = culling, culling.max = culling, culling.incr = 0,
analyzed.features = "w",
delete.pronouns = FALSE,
start.at = start_at,
ngram.size = ngram_size, distance.measure = distance_measure)
freq_df <- as.data.frame(batch$table.with.all.freqs)
all_predictions <- data.frame(MFW = numeric(),
accuracy = numeric(), precision = numeric(),
recall = numeric(), f1 = numeric(),
incorrect = character(), stringsAsFactors = FALSE)
for (i in 1:30) {
x <- (i-1)*100
cut_off <- 3000 - x
freq_df_3000 <- freq_df[,1:cut_off]
freq_df_3000$gender <- rownames(freq_df_3000)
freq_df_3000$gender <- gsub("(w|m)_.+", "\\1", freq_df_3000$gender)
test_cases <- c("w_La-Roche_Sternheim-Teil-1_1771",
"w_La-Roche_Sternheim-Teil-2_1771",
"w_Wobeser_Elisa_1795",
"w_Unger_Bekenntnisse_1806")
test_cases_df <- freq_df_3000[test_cases,]
freq_without <- freq_df_3000[!(row.names(freq_df_3000) %in% test_cases), ]
set.seed(seed)
sample <- sample.int(n = nrow(freq_without),
size = floor(.83*nrow(freq_without)), replace = FALSE)
train <- freq_without[sample, ]
test  <- freq_without[-sample, ]
test <- rbind(test, test_cases_df)
ctrl <- trainControl(method = "cv", number = 10,
savePred = TRUE, classProb = TRUE)
mod <- train(gender ~ ., data = train,
method = "svmLinear", trControl = ctrl)
predictions <- predict.train(object = mod, test, type="raw")
conf <- confusionMatrix(predictions, as.factor(test$gender))
accuracy <- conf$overall[[1]]
precision <- conf$byClass[[5]]
recall <- conf$byClass[[6]]
f1 <- 2*((precision*recall)/(precision + recall))
test$gender_predicted <- predictions
results_prediction <- test[,c("gender", "gender_predicted")]
j <- which(!(results_prediction$gender == results_prediction$gender_predicted))
df <- results_prediction[j, ]
texts <- rownames(df)
texts_r <- paste(texts, sep=",", collapse=" ")
results <- c(cut_off, accuracy, precision, recall, f1, texts_r)
all_predictions[i,] <- results
print(i)
}
write.table(all_predictions, paste0("all_predictions_all_values_seed", seed, ".csv"),
col.names = NA, sep = " ")
library(caret)
library(stylo)
setwd("C:\\Users\\litlab-hiwi\\Documents\\12gegenGoethe\\corpora\\190724_Romankorpus_Classifier\\Romankorpus_gesamt")
corpus_dir <- "C:\\Users\\litlab-hiwi\\Documents\\12gegenGoethe\\corpora\\190724_Romankorpus_Classifier\\Romankorpus_gesamt\\all" # Pfad zum Korpus
MFW <- 3000
start_at <- 1
distance_measure <- "dist.delta"
ngram_size <- 1
culling <- 20
seed <- 102
#------------------------------------------------------------------------------#
## Stylo-Ausfuehrung  ---------------------------------------------------------#
#------------------------------------------------------------------------------#
# Die Analysen werden in ein Batch abgespeichert, um später zusätzliche
# Informationen extrahieren zu können.
batch <- stylo(gui = FALSE, corpus.dir = corpus_dir,
corpus.format = "plain",
corpus.lang = "German", encoding = "UTF-8",
mfw.min = MFW, mfw.max = MFW, mfw.incr = 0,
culling.min = culling, culling.max = culling, culling.incr = 0,
analyzed.features = "w",
delete.pronouns = FALSE,
start.at = start_at,
ngram.size = ngram_size, distance.measure = distance_measure)
freq_df <- as.data.frame(batch$table.with.all.freqs)
all_predictions <- data.frame(MFW = numeric(),
accuracy = numeric(), precision = numeric(),
recall = numeric(), f1 = numeric(),
incorrect = character(), stringsAsFactors = FALSE)
for (i in 1:30) {
x <- (i-1)*100
cut_off <- 3000 - x
freq_df_3000 <- freq_df[,1:cut_off]
freq_df_3000$gender <- rownames(freq_df_3000)
freq_df_3000$gender <- gsub("(w|m)_.+", "\\1", freq_df_3000$gender)
test_cases <- c("w_La-Roche_Sternheim-Teil-1_1771",
"w_La-Roche_Sternheim-Teil-2_1771",
"w_Wobeser_Elisa_1795",
"w_Unger_Bekenntnisse_1806")
test_cases_df <- freq_df_3000[test_cases,]
freq_without <- freq_df_3000[!(row.names(freq_df_3000) %in% test_cases), ]
set.seed(seed)
sample <- sample.int(n = nrow(freq_without),
size = floor(.83*nrow(freq_without)), replace = FALSE)
train <- freq_without[sample, ]
test  <- freq_without[-sample, ]
test <- rbind(test, test_cases_df)
ctrl <- trainControl(method = "cv", number = 10,
savePred = TRUE, classProb = TRUE)
mod <- train(gender ~ ., data = train,
method = "svmLinear", trControl = ctrl)
predictions <- predict.train(object = mod, test, type="raw")
conf <- confusionMatrix(predictions, as.factor(test$gender))
accuracy <- conf$overall[[1]]
precision <- conf$byClass[[5]]
recall <- conf$byClass[[6]]
f1 <- 2*((precision*recall)/(precision + recall))
test$gender_predicted <- predictions
results_prediction <- test[,c("gender", "gender_predicted")]
j <- which(!(results_prediction$gender == results_prediction$gender_predicted))
df <- results_prediction[j, ]
texts <- rownames(df)
texts_r <- paste(texts, sep=",", collapse=" ")
results <- c(cut_off, accuracy, precision, recall, f1, texts_r)
all_predictions[i,] <- results
print(i)
}
write.table(all_predictions, paste0("all_predictions_all_values_seed", seed, ".csv"),
col.names = NA, sep = " ")
library(caret)
library(stylo)
setwd("C:\\Users\\litlab-hiwi\\Documents\\12gegenGoethe\\corpora\\190724_Romankorpus_Classifier\\Romankorpus_gesamt")
corpus_dir <- "C:\\Users\\litlab-hiwi\\Documents\\12gegenGoethe\\corpora\\190724_Romankorpus_Classifier\\Romankorpus_gesamt\\all" # Pfad zum Korpus
MFW <- 3000
start_at <- 1
distance_measure <- "dist.delta"
ngram_size <- 1
culling <- 20
seed <- 103
#------------------------------------------------------------------------------#
## Stylo-Ausfuehrung  ---------------------------------------------------------#
#------------------------------------------------------------------------------#
# Die Analysen werden in ein Batch abgespeichert, um später zusätzliche
# Informationen extrahieren zu können.
batch <- stylo(gui = FALSE, corpus.dir = corpus_dir,
corpus.format = "plain",
corpus.lang = "German", encoding = "UTF-8",
mfw.min = MFW, mfw.max = MFW, mfw.incr = 0,
culling.min = culling, culling.max = culling, culling.incr = 0,
analyzed.features = "w",
delete.pronouns = FALSE,
start.at = start_at,
ngram.size = ngram_size, distance.measure = distance_measure)
freq_df <- as.data.frame(batch$table.with.all.freqs)
all_predictions <- data.frame(MFW = numeric(),
accuracy = numeric(), precision = numeric(),
recall = numeric(), f1 = numeric(),
incorrect = character(), stringsAsFactors = FALSE)
for (i in 1:30) {
x <- (i-1)*100
cut_off <- 3000 - x
freq_df_3000 <- freq_df[,1:cut_off]
freq_df_3000$gender <- rownames(freq_df_3000)
freq_df_3000$gender <- gsub("(w|m)_.+", "\\1", freq_df_3000$gender)
test_cases <- c("w_La-Roche_Sternheim-Teil-1_1771",
"w_La-Roche_Sternheim-Teil-2_1771",
"w_Wobeser_Elisa_1795",
"w_Unger_Bekenntnisse_1806")
test_cases_df <- freq_df_3000[test_cases,]
freq_without <- freq_df_3000[!(row.names(freq_df_3000) %in% test_cases), ]
set.seed(seed)
sample <- sample.int(n = nrow(freq_without),
size = floor(.83*nrow(freq_without)), replace = FALSE)
train <- freq_without[sample, ]
test  <- freq_without[-sample, ]
test <- rbind(test, test_cases_df)
ctrl <- trainControl(method = "cv", number = 10,
savePred = TRUE, classProb = TRUE)
mod <- train(gender ~ ., data = train,
method = "svmLinear", trControl = ctrl)
predictions <- predict.train(object = mod, test, type="raw")
conf <- confusionMatrix(predictions, as.factor(test$gender))
accuracy <- conf$overall[[1]]
precision <- conf$byClass[[5]]
recall <- conf$byClass[[6]]
f1 <- 2*((precision*recall)/(precision + recall))
test$gender_predicted <- predictions
results_prediction <- test[,c("gender", "gender_predicted")]
j <- which(!(results_prediction$gender == results_prediction$gender_predicted))
df <- results_prediction[j, ]
texts <- rownames(df)
texts_r <- paste(texts, sep=",", collapse=" ")
results <- c(cut_off, accuracy, precision, recall, f1, texts_r)
all_predictions[i,] <- results
print(i)
}
write.table(all_predictions, paste0("all_predictions_all_values_seed", seed, ".csv"),
col.names = NA, sep = " ")
