################################## Abbildung 15 ################################
#------------------------------------------------------------------------------#
### Skript zur Erstellung von Abbildung 15: Clustering mit dem
### Autorschaftstestkorpus für die Bekenntnisse einer schönen Seele. Von ihr
### selbst geschrieben (1806). 100-3000 MFW, Cosine Delta, 20 % Culling,
### Consensus Strength 0,5.
#------------------------------------------------------------------------------#
## Benoetigte Bibliotheken ----------------------------------------------------#
#------------------------------------------------------------------------------#
library(ape)
library(ggtree)
library(treeio)
library(tibble)
#------------------------------------------------------------------------------#
## Einlesen der Daten ---------------------------------------------------------#
#------------------------------------------------------------------------------#
# Output-Ordner festlegen
output_dir <- "C:\\Rivalinnen\\plots\\Abbildung15"
if(!dir.exists(paste0(output_dir))){
dir.create(paste0(output_dir), recursive = TRUE)
}
# Input-Ordner festlegen
results_dir <- "C:\\Rivalinnen\\results\\Stilometrie\\Buchholz"
# Die iterativ erstellten Distanztabellen werden eingelesen
files <- list.files(results_dir, pattern = "distance_table_",
recursive = FALSE, full.names = TRUE)
# Fuer jede Distanztabelle wird ein Dendrogramm erstellt
dendrograms <- list()
for (i in 1:length(files)) {
dist <- read.csv(files[i], sep = " ")
dendrogram <- as.phylo(hclust(as.dist(dist), method = "ward.D"))
dendrograms[[i]] <- dendrogram
}
# Damit Texte nach Autorschaft eingefaerbt werden koennen, wird eine
# Gruppierung erstellt
names <- gsub("_.*","", names(dist))
unique_labels <- unique(as.data.frame(names))
labels_cleaned <- merge(as.data.frame(names), unique_labels, by = 'names')
col <- c("sienna4", "slateblue4", "seagreen4", "deepskyblue1", "dimgrey")
nas <- rep(NA, 88)
names <- c(names, nas)
consensus <- consensus(dendrograms, p = 0.5)
n <- Nnode2(consensus)
data <- tibble(node = 1:n, authors = names)
#------------------------------------------------------------------------------#
## Plotting -------------------------------------------------------------------#
#------------------------------------------------------------------------------#
tree <- treedata(phylo = consensus, data = data)
# Anpassung der Visualisierung
#t <- ggtree(tree, layout = "circular", size = 0.1)
t <- open_tree(t, angle = 180)
t + geom_tiplab(size = 0.7, aes(color = data$authors)) +
scale_color_manual(values = col) +
# Aeste, die von Interesse sind, werden farblich unterlegt
geom_hilight(c(210), fill = "lightgrey") +
geom_hilight(c(169), fill = "lightgrey") +
theme(legend.position = "none")
filename <-  paste0(output_dir, "\\Consensus_circular-layout.png")
ggsave(filename, width = 15, height = 15, dpi = 960, bg = "transparent",
units = "cm", limitsize = FALSE)
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# Output-Ordner festlegen
output_dir <- "C:\\Rivalinnen\\plots\\Abbildung15"
if(!dir.exists(paste0(output_dir))){
dir.create(paste0(output_dir), recursive = TRUE)
}
# Input-Ordner festlegen
results_dir <- "C:\\Rivalinnen\\results\\Stilometrie\\Buchholz"
# Die iterativ erstellten Distanztabellen werden eingelesen
files <- list.files(results_dir, pattern = "distance_table_",
recursive = FALSE, full.names = TRUE)
# Fuer jede Distanztabelle wird ein Dendrogramm erstellt
dendrograms <- list()
for (i in 1:length(files)) {
dist <- read.csv(files[i], sep = " ")
dendrogram <- as.phylo(hclust(as.dist(dist), method = "ward.D"))
dendrograms[[i]] <- dendrogram
}
# Damit Texte nach Autorschaft eingefaerbt werden koennen, wird eine
# Gruppierung erstellt
names <- gsub("_.*","", names(dist))
unique_labels <- unique(as.data.frame(names))
labels_cleaned <- merge(as.data.frame(names), unique_labels, by = 'names')
col <- c("sienna4", "slateblue4", "seagreen4", "deepskyblue1", "dimgrey")
nas <- rep(NA, 88)
names <- c(names, nas)
consensus <- consensus(dendrograms, p = 0.5)
n <- Nnode2(consensus)
data <- tibble(node = 1:n, authors = names)
tree <- treedata(phylo = consensus, data = data)
# Anpassung der Visualisierung
t <- ggtree(tree, layout = "circular", size = 0.1)
t <- open_tree(t, angle = 180)
t + geom_tiplab(size = 0.7, aes(color = data$authors)) +
scale_color_manual(values = col) +
# Aeste, die von Interesse sind, werden farblich unterlegt
geom_hilight(c(210), fill = "lightgrey") +
geom_hilight(c(169), fill = "lightgrey") +
theme(legend.position = "none")
filename <-  paste0(output_dir, "\\Consensus_circular-layout.png")
ggsave(filename, width = 15, height = 15, dpi = 960, bg = "transparent",
units = "cm", limitsize = FALSE)
filename <-  paste0(output_dir, "\\Consensus_circular-layout.png")
output_dir
ggsave(filename, width = 15, height = 15, dpi = 960, bg = "transparent",
units = "cm", limitsize = FALSE)
library(ggpubr)
library(wordcloud)
library(ggpubr)
################################# Abbildung 19 #################################
#------------------------------------------------------------------------------#
### Skript zur Erstellung von Abbildung 19: Topic N. 15 und N. 42 und N. 100
### aus dem gleichen Topic Model zum Romankorpus 18. Jahrhundert wie
### Abbildungen 8 und 9.
#------------------------------------------------------------------------------#
## Benoetigte Bibliotheken ----------------------------------------------------#
#------------------------------------------------------------------------------#
library(wordcloud)
library(ggpubr)
#------------------------------------------------------------------------------#
## Einlesen der Daten ---------------------------------------------------------#
#------------------------------------------------------------------------------#
# Output-Ordner festlegen
output_dir <- "C:\\Rivalinnen\\plots\\Abbildung19"
if(!dir.exists(paste0(output_dir))){
dir.create(paste0(output_dir), recursive = TRUE)
}
corpus <- "Romankorpus_18_Jahrhundert"
tm_results<- paste0("C:\\Rivalinnen\\results\\TopicModeling\\",
corpus, "\\100Topics\\M1")
# Der Pfad zur Wordweight Datei wird als String definiert
file <- paste0(tm_results,
"\\TM_500chunksize_100numtopics_10000iteration_100twords__wordweight.csv")
wordweights <- read.csv(file, sep = " ")
#------------------------------------------------------------------------------#
## Herausfiltern des Topics ---------------------------------------------------#
#------------------------------------------------------------------------------#
# Wie viele Topic-Woerter sollen abgebildet werden? Das wordweights Dataframe
# wird entsprechend abgeschnitten.
limit <- 25
wordweights <- wordweights[1:limit,]
# Struktur der Wordweight Datei:
# Spalten mit ungerader Ordnungszahl --> Topic-Woerter
# Spalten mit gerader Ordnungszahl --> Wortgewichte
# Nummer der Topics, das abgebildet werden soll
topic_no <- c(15, 42, 100)
all_plots <- list()
for (i in 1:length(topic_no)) {
index <- topic_no[i]*2
df <- wordweights[,(index-1):index]
colnames(df) <- c("Topic_Wörter", "Wortgewichte")
png_file <- paste0(output_dir, "\\Wordcloud_Topic", topic_no[i], "_",
limit,".png")
png(png_file, width = 2500, height = 2500, bg = NA, res = 320)
wordcloud(df$Topic_Wörter,
df$Wortgewichte,
scale = c(6.8,.01),
min.freq = 1, max.words = 100, rot.per=0,
random.order=FALSE)
p <- recordPlot()
all_plots[[i]] <- p
graphics.off()
}
all_plots[[i]]
length(topic_no)
output_dir
all_plots <- list()
for (i in 1:length(topic_no)) {
index <- topic_no[i]*2
df <- wordweights[,(index-1):index]
colnames(df) <- c("Topic_Wörter", "Wortgewichte")
png_file <- paste0(output_dir, "\\Wordcloud_Topic", topic_no[i], "_",
limit,".png")
png(png_file, width = 2500, height = 2500, bg = NA, res = 320)
wordcloud(df$Topic_Wörter,
df$Wortgewichte,
scale = c(6.8,.01),
min.freq = 1, max.words = 100, rot.per=0,
random.order=FALSE)
graphics.off()
p <- recordPlot()
all_plots[[i]] <- p
}
all_plots <- list()
for (i in 1:length(topic_no)) {
index <- topic_no[i]*2
df <- wordweights[,(index-1):index]
colnames(df) <- c("Topic_Wörter", "Wortgewichte")
png_file <- paste0(output_dir, "\\Wordcloud_Topic", topic_no[i], "_",
limit,".png")
png(png_file, width = 2500, height = 2500, bg = NA, res = 320)
wordcloud(df$Topic_Wörter,
df$Wortgewichte,
scale = c(6.8,.01),
min.freq = 1, max.words = 100, rot.per=0,
random.order=FALSE)
p <- recordPlot()
all_plots[[i]] <- p
graphics.off()
}
multiplot <- ggarrange(all_plots[[1]], all_plots[[2]], all_plots[[3]],
ncol = 3, nrow = 1)
install.packages("gridGraphics")
library(gridGraphics)
multiplot <- ggarrange(all_plots[[1]], all_plots[[2]], all_plots[[3]],
ncol = 3, nrow = 1)
filename <-  paste0(output_dir, "\\Abbildung19_allTopics.png")
ggsave(filename, width = 50, height = 30, dpi = 320, bg = "transparent",
units = "cm", limitsize = FALSE)
library(gridGraphics)
library(grid)
grid.echo()
all_plots[[i]]
all_plots <- list()
for (i in 1:length(topic_no)) {
index <- topic_no[i]*2
df <- wordweights[,(index-1):index]
colnames(df) <- c("Topic_Wörter", "Wortgewichte")
png_file <- paste0(output_dir, "\\Wordcloud_Topic", topic_no[i], "_",
limit,".png")
png(png_file, width = 2500, height = 2500, bg = NA, res = 320)
wordcloud(df$Topic_Wörter,
df$Wortgewichte,
scale = c(6.8,.01),
min.freq = 1, max.words = 100, rot.per=0,
random.order=FALSE)
plot(all_plots[[i]])
graphics.off()
}
all_plots <- list()
for (i in 1:length(topic_no)) {
index <- topic_no[i]*2
df <- wordweights[,(index-1):index]
colnames(df) <- c("Topic_Wörter", "Wortgewichte")
png_file <- paste0(output_dir, "\\Wordcloud_Topic", topic_no[i], "_",
limit,".png")
png(png_file, width = 2500, height = 2500, bg = NA, res = 320)
wordcloud(df$Topic_Wörter,
df$Wortgewichte,
scale = c(6.8,.01),
min.freq = 1, max.words = 100, rot.per=0,
random.order=FALSE)
plot(all_plots[[i]])
graphics.off()
}
all_plots <- vector(length(topic_no), mode='list')
for (i in 1:length(topic_no)) {
index <- topic_no[i]*2
df <- wordweights[,(index-1):index]
colnames(df) <- c("Topic_Wörter", "Wortgewichte")
png_file <- paste0(output_dir, "\\Wordcloud_Topic", topic_no[i], "_",
limit,".png")
png(png_file, width = 2500, height = 2500, bg = NA, res = 320)
wordcloud(df$Topic_Wörter,
df$Wortgewichte,
scale = c(6.8,.01),
min.freq = 1, max.words = 100, rot.per=0,
random.order=FALSE)
all_plots[[i]] <- recordPlot()
graphics.off()
}
all_plots[[1]]
multiplot <- ggarrange(replayPlot(all_plots[[1]]),
replayPlot(all_plots[[2]]),
replayPlot(all_plots[[3]]),
ncol = 3, nrow = 1)
multiplot
multiplot <- ggarrange(replayPlot(all_plots[[1]]),
replayPlot(all_plots[[2]]),
replayPlot(all_plots[[3]]),
ncol = 3, nrow = 1)
filename <-  paste0(output_dir, "\\Abbildung19_allTopics.png")
ggsave(filename, width = 50, height = 30, dpi = 320, bg = "transparent",
units = "cm", limitsize = FALSE)
all_plots <- list()
for (i in 1:length(topic_no)) {
index <- topic_no[i]*2
df <- wordweights[,(index-1):index]
colnames(df) <- c("Topic_Wörter", "Wortgewichte")
png_file <- paste0(output_dir, "\\Wordcloud_Topic", topic_no[i], "_",
limit,".png")
png(png_file, width = 2500, height = 2500, bg = NA, res = 320)
all_plots[[i]] <- wordcloud(df$Topic_Wörter,
df$Wortgewichte,
scale = c(6.8,.01),
min.freq = 1, max.words = 100, rot.per=0,
random.order=FALSE)
plot(all_plots[[i]])
graphics.off()
}
length(topic_no)
i <- 1
index <- topic_no[i]*2
df <- wordweights[,(index-1):index]
colnames(df) <- c("Topic_Wörter", "Wortgewichte")
all_plots <- vlist()
index <- topic_no[i]*2
df <- wordweights[,(index-1):index]
colnames(df) <- c("Topic_Wörter", "Wortgewichte")
png_file <- paste0(output_dir, "\\Wordcloud_Topic", topic_no[i], "_",
limit,".png")
all_plots <- list()
index <- topic_no[i]*2
df <- wordweights[,(index-1):index]
colnames(df) <- c("Topic_Wörter", "Wortgewichte")
png_file <- paste0(output_dir, "\\Wordcloud_Topic", topic_no[i], "_",
limit,".png")
all_plots[[i]] <- wordcloud(df$Topic_Wörter,
df$Wortgewichte,
scale = c(6.8,.01),
min.freq = 1, max.words = 100, rot.per=0,
random.order=FALSE)
print(all_plots[[i]])
all_plots[[i]]
